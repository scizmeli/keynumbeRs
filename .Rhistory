library(keynumbers)
library(keynumbers)
library(keynumbers)
oauth_app
GET
url = "http://dev.keynumbers.com/api/collection/battery-2052"
library(httr)
# OPTION 1
res <- GET(url, add_headers(Authorization = paste("Bearer", key, sep = " ")))
key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozNDg5LCJpYXQiOjE1NDc2NDQ1OTh9.qdtP3_IMy12VOL98kvCd9JtMXZY3dycOlKMNMEC3PWc"
# OPTION 1
res <- GET(url, add_headers(Authorization = paste("Bearer", key, sep = " ")))
res$status_code
content(res)
kn.getCollection <- function(coll) {
# OPTION 1
res <- GET(url, add_headers(Authorization = paste("Bearer", key, sep = " ")))
if (res$status_code == 200)
content(res)
else
error(paste("Status code is", res$status_code))
}
url = "http://dev.keynumbers.com/api/collection/battery-205123"
kn.getCollection()
kn.getCollection <- function(coll) {
# OPTION 1
res <- GET(url, add_headers(Authorization = paste("Bearer", key, sep = " ")))
if (res$status_code == 200)
content(res)
else
stop(paste("Status code is", res$status_code))
}
kn.getCollection()
library(keynumbers)
url
library(keynumbers)
url
kn.getCollection()
res
# OPTION 1
res <- GET(url, add_headers(Authorization = paste("Bearer", key, sep = " ")))
res$status_code
res$content
content(res)
content(res)$message
stop(paste("Status code is", res$status_code), ".", content(res)$message)
stop(paste("Status code is", res$status_code), ". ", content(res)$message)
stop(paste("Status code: ", res$status_code), " Message: ", content(res)$message)
stop(paste("Status code:", res$status_code), " Message: ", content(res)$message)
stop(paste("Status code:", res$status_code), ", Message: ", content(res)$message)
url = "http://dev.keynumbers.com/api/collection/battery-2052"
kn.getCollection <- function(coll) {
# OPTION 1
res <- GET(url, add_headers(Authorization = paste("Bearer", key, sep = " ")))
if (res$status_code == 200)
content(res)
else
stop(paste("Status code:", res$status_code), ", Message: ", content(res)$message)
}
kn.getCollection()
a<-kn.getCollection()
names(a)
names(a$locations)
names(a$dates)
names(a$entities)
a$entities)
a$entities
(a$dates)
(a$locations)
a$entities
names(a)
a$collection
names(a)
a$datasets
kn.getCollection <- function(coll) {
browser()
url <- paste0(url,coll)
res <- GET(url, add_headers(Authorization = paste("Bearer", key, sep = " ")))
if (res$status_code == 200)
content(res)
else
stop(paste("Status code:", res$status_code), ", Message: ", content(res)$message)
}
kn.getCollection()
coll
exists(coll)
library(keynumbers)
a<-kn.getModel(coll="sydney-water-usuage-1879")
library(keynumbers)
a<-kn.getModel(coll="sydney-water-usuage-1879")
library(keynumbers)
a<-kn.getModel(coll="sydney-water-usuage-1879")
library(keynumbers)
a<-kn.getModel(coll="sydney-water-usuage-1879")
a<-kn.getModel(model="sydney-water-usuage-1879")
library(keynumbers)
url
url
a<-kn.getModel(model="sydney-water-usuage-1879")
library(keynumbers)
key
a<-kn.getModel(model="sydney-water-usuage-1879")
library(keynumbers)
a<-kn.getModel(model="sydney-water-usuage-1879")
library(keynumbers)
a<-kn.getModel(model="sydney-water-usuage-1879")
library(keynumbers)
print(url)
print(url)
a<-kn.getCollection(coll="battery-2052")
key
library(keynumbers)
url_dev
key_dev
a<-kn.getCollection(coll="sydney-water-consumption-3023")
a<-kn.getCollection(coll="sydney-water-consumption-3023")
library(keynumbers)
library(keynumbers)
a<-kn.getCollection(coll="sydney-water-consumption-3023")
library(keynumbers)
a<-kn.getCollection(coll="sydney-water-consumption-3023")
a
plot()
library(keynumbers)
a<-kn.getCollection(coll="sydney-water-consumption-3023")
library(keynumbers)
a<-kn.getCollection(coll="sydney-water-consumption-3023")
a
oauth_app
a<-kn.getModel(model="sydney-water-usuage-1879")
a
toJson(a)
jsonlite::toJson(a)
jsonlite::toJSON(a)
jsonlite::toJSON(a,auto_unbox = T, pretty = T)
formula = a$data$formula
formula
a$data$segments
length(a$data$segments)
a$data$segments[[1]]
names(a$data$segments[[1]])
a$data$segments[[1]]$dividend
a$data$segments[[1]]$dividend$number
sapply(a$data$segments, function(x) {
paste(x$dividend$number, "/", x$divisor$number)
})
sapply(a$data$segments, function(x) {
paste(x$dividend$number, "/", x$divisor$number)
print(" ")
})
sapply(a$data$segments, function(x) {
print(paste(x$dividend$number, "/", x$divisor$number))
print(" ")
})
file.remove("test")
1677251/557807
LETTERS
sapply(a$data$segments, function(x) {
print(paste(x$dividend$number, "/", x$divisor$number))
print(" ")
})
segments = a$data$segments
sapply(1:length(segments), function(x) {
L = LETTERS
print(L[[x]], " = ", paste(segments[[x]]$dividend$number, "/", segments[[x]]$divisor$number))
print(" ")
})
segments = a$data$segments
sapply(1:length(segments), function(x) {
L = LETTERS
print(L[[x]], " = ", paste(segments[[x]]$dividend$number, "/", segments[[x]]$divisor$number))
print(" ")
})
14500/1.18
sapply(1:length(segments), function(x) {
L = LETTERS
print(L[[x]], " = ", paste(segments[[x]]$dividend$number, "/", segments[[x]]$divisor$number))
print(" ")
})
sapply(1:length(segments), function(x) {
L = LETTERS
print(L[x], " = ", paste(segments[[x]]$dividend$number, "/", segments[[x]]$divisor$number))
print(" ")
})
sapply(1:length(segments), function(x) {
L = LETTERS
print(paste(L[x], " = ", segments[[x]]$dividend$number, "/", segments[[x]]$divisor$number))
print(" ")
})
?assign
sapply(1:length(segments), function(x) {
L = LETTERS
assign(L[x], segments[[x]]$dividend$number / segments[[x]]$divisor$number)
print(" ")
})
sapply(1:length(segments), function(x) {
L = LETTERS
assign(L[x], segments[[x]]$dividend$number/segments[[x]]$divisor$number)
print(" ")
})
L = LETTERS
L[1]
L[1]
L = LETTERS
sapply(1:length(segments), function(x) {
L = LETTERS
assign(L[x], segments[[x]]$dividend$number/segments[[x]]$divisor$number)
print(" ")
})
sapply(1:length(segments), function(x) {
L = LETTERS
assign(L[x], segments[[x]]$dividend$number/segments[[x]]$divisor$number)
print(" ")
})
sapply(1:length(segments), function(x) {
L = LETTERS
browser()
assign(L[x], segments[[x]]$dividend$number/segments[[x]]$divisor$number)
print(" ")
})
assign(L[x], segments[[x]]$dividend$number/segments[[x]]$divisor$number)
L[x]
x
length(segments)
segments[[x]]$dividend$number
?environment
sapply(1:length(segments), function(x) {
L = LETTERS
assign(L[x],
as.numeric(segments[[x]]$dividend$number)/as.numeric(segments[[x]]$divisor$number))
print(" ")
})
sapply(1:length(segments), function(x) {
L = LETTERS
assign(L[x], envir = parent.env(),
as.numeric(segments[[x]]$dividend$number)/as.numeric(segments[[x]]$divisor$number))
print(" ")
})
sapply(1:length(segments), function(x) {
L = LETTERS
assign(L[x], envir = parent.env,
as.numeric(segments[[x]]$dividend$number)/as.numeric(segments[[x]]$divisor$number))
print(" ")
})
parent.env()
parent.frame()
sapply(1:length(segments), function(x) {
L = LETTERS
assign(L[x], envir = parent.frame(),
as.numeric(segments[[x]]$dividend$number)/as.numeric(segments[[x]]$divisor$number))
print(" ")
})
Segs = lapply(1:length(segments), function(x) {
as.numeric(segments[[x]]$dividend$number)/as.numeric(segments[[x]]$divisor$number)
})
Segs
names(Segs) <-  LETTERS[1:length(Segs)]
Segs
formula
eval(formula)
eval(parse(text = formula))
eval(parse(text = formula),envir = )
?lapply
environmentName(env)
environmentName(env = env)
sys.parent(n = 1)
sys.parent()
sys.parent(n=2)
sys.parents()
Segs = lapply(1:length(segments), function(x) {
sys.parents()
as.numeric(segments[[x]]$dividend$number)/as.numeric(segments[[x]]$divisor$number)
})
Segs = lapply(1:length(segments), function(x) {
str(sys.parents())
as.numeric(segments[[x]]$dividend$number)/as.numeric(segments[[x]]$divisor$number)
})
sys.parents()
Segs = lapply(1:length(segments), function(x) {
str(parent.frame())
as.numeric(segments[[x]]$dividend$number)/as.numeric(segments[[x]]$divisor$number)
})
Segs = lapply(1:length(segments), function(x) {
out <- as.numeric(segments[[x]]$dividend$number)/as.numeric(segments[[x]]$divisor$number)
assign("zuzu", envir = parent.frame())
})
Segs = lapply(1:length(segments), function(x) {
out <- as.numeric(segments[[x]]$dividend$number)/as.numeric(segments[[x]]$divisor$number)
assign("zuzu", out, envir = parent.frame())
})
Segs = lapply(1:length(segments), function(x) {
out <- as.numeric(segments[[x]]$dividend$number)/as.numeric(segments[[x]]$divisor$number)
assign("zuzu", out, inherits = TRUE)
})
Segs = lapply(1:length(segments), function(x) {
out <- as.numeric(segments[[x]]$dividend$number)/as.numeric(segments[[x]]$divisor$number)
assign(LETTERS[x], out, inherits = TRUE)
})
C
?C
Segs = lapply(1:length(segments), function(x) {
out <- as.numeric(segments[[x]]$dividend$number)/as.numeric(segments[[x]]$divisor$number)
assign(paste0(LETTERS[x],"1"), out, inherits = TRUE)
})
eval(parse(text = formula))
B
C
formula
length(LETTERS)
sapply(1:length(LETTERS), function(x) {
gsub(LETTERS[x], paste0(LETTERS[x],"1"), formula)
})
sapply(1:length(LETTERS), function(x) {
formula <<- gsub(LETTERS[x], paste0(LETTERS[x],"1"), formula)
})
formula
formula = a$data$formula
nul <- sapply(1:length(LETTERS), function(x) {
formula <<- gsub(LETTERS[x], paste0(LETTERS[x],"1"), formula)
})
formula
eval(parse(text = formula))
library(keynumbers)
library(keynumbers)
kn.ModelExec(a)
kn.getCollection("3023")
kn.ModelExec(a)
coll <- kn.getCollection("3023")
length(coll)
names(coll[[1]])
coll[[1]]
names(coll[[1]])
names(coll[[2]])
names(coll)
names(coll$collection)
length(coll$collection)
sapply(coll$collection, function(x) {
)
sapply(coll$collection, function(x) {
x$number
})
coll$collection
sapply(coll$keynumbers, function(x) {
x$number
})
coll$keynumbers
names(coll$keynumbers)
names(coll$keynumbers$dividends)
(coll$keynumbers$dividends)
sapply(coll$keynumbers$dividends, function(x) {
x$number
})
number <- sapply(coll$keynumbers$dividends, function(x) {
x$number
})
number <- sapply(coll$keynumbers$dividends, function(x) {
c(number=x$number, location=x$location, date=x$date)
})
number
t(number)
number <- t(number)
class(number)
number <- sapply(coll$keynumbers$dividends, function(x) {
c(number=x$number, location=x$location, date=x$date)
})
number <- as.data.frame(t(number))
number
number$number
number$date
number <- sapply(coll$keynumbers$dividends, function(x) {
data.frame(number=x$number, location=x$location, date=x$date)
})
number
number <- lapply(coll$keynumbers$dividends, function(x) {
data.frame(number=x$number, location=x$location, date=x$date)
})
number
number <- do.call(rbind, number)
number
fullcoll <- lapply(coll$keynumbers$dividends, function(x) {
data.frame(number=x$number, location=x$location, date=x$date)
})
fullcoll <- do.call(rbind, fullcoll)
fullcoll
fullcoll$number
fullcoll$location
fullcoll$date
as.Date(fullcoll$date)
class(as.Date(fullcoll$date))
class(as.POSIXct(fullcoll$date))
(as.POSIXct(fullcoll$date))
fullcoll$date <- as.POSIXct(fullcoll$date)
fullcoll$date
fullcoll
library(keynumbers)
kn.Coll2df(a)
library(keynumbers)
kn.Coll2df(a)
library(keynumbers)a
a
kn.Coll2df(coll)
coll
kn.Coll2df(a)
library(keynumbers)
rm(coll)
coll2 <- kn.getCollection("3023")
kn.ModelExec(a)
kn.Coll2df(a)
kn.Coll2df(coll2)
coll1 <- kn.getCollection("3019")
coll1
kn.Coll2df(coll1)
library(keynumbers)
kn.Coll2df(coll1)
library(keynumbers)
kn.Coll2df(coll1)
kn.Coll2df(coll2)
kn.Coll2df(coll2)
kn.Coll2df(coll2)
library(keynumbers)
kn.ModelColNames(a)
formula
model$data$result
names(model$data$result)
names(model$data$segments)
sapply(model$data$segments, function(x) x$divident$collection_id)
sapply(model$data$segments, function(x) x$collection_id)
model$data$segments[[1]]$
sapply(model$data$segments, function(x) x$dividend$collection_id)
length(sapply(model$data$segments, function(x) x$dividend$collection_id))
class(sapply(model$data$segments, function(x) x$dividend$collection_id))
library(keynumbers)
kn.ModelColNames(a)
colnames <- kn.ModelSegmentColNames(a)
colnames
colnames
collnames <- kn.ModelSegmentColNames(a)
library(keynumbers)
collnames <- kn.ModelSegmentColNames(a)
(collnames)
as.character(collnames)
library(keynumbers)
collnames <- kn.ModelSegmentColNames(a)
(collnames)
a<-kn.getModel(model="sydney-water-usuage-1879")
kn.ModelExec(a)
keyring_list()
library(keyring)
install.packages("keyring")
install.packages("keyring")
install.packages("pkgdown")
library(pkgdown)
pkgdown::build_site()
